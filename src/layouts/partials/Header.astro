---
import Logo from "@/components/Logo.astro";
import ThemeSwitcher from "@/components/ThemeSwitcher.astro";
import config from "@/config/config.json";
import menu from "@/config/menu.json";
import { IoSearch } from "react-icons/io5";

export interface ChildNavigationLink {
  name: string;
  url: string;
}

export interface NavigationLink {
  name: string;
  url: string;
  hasChildren?: boolean;
  children?: ChildNavigationLink[];
}

const { main }: { main: NavigationLink[] } = menu;
const { navigation_button, settings } = config;
const { pathname } = Astro.url;
---

<header class={`header z-30 ${settings.sticky_header && "sticky top-0"}`}>
  <nav class="navbar container">
    <!-- logo -->
    <div class="order-0">
      <Logo />
    </div>
    <!-- navbar toggler -->
    <input id="nav-toggle" type="checkbox" class="hidden" />
    <label
      for="nav-toggle"
      class="order-3 cursor-pointer flex items-center lg:hidden text-text-dark dark:text-white lg:order-1"
    >
      <svg id="show-button" class="h-6 fill-current block" viewBox="0 0 20 20">
        <title>Menu Open</title>
        <path d="M0 3h20v2H0V3z m0 6h20v2H0V9z m0 6h20v2H0V0z"></path>
      </svg>
      <svg id="hide-button" class="h-6 fill-current hidden" viewBox="0 0 20 20">
        <title>Menu Close</title>
        <polygon
          points="11 9 22 9 22 11 11 11 11 22 9 22 9 11 -2 11 -2 9 9 9 9 -2 11 -2"
          transform="rotate(45 10 10)"></polygon>
      </svg>
    </label>
    <!-- /navbar toggler -->
    <ul
      id="nav-menu"
      class="navbar-nav order-3 hidden w-full pb-6 lg:order-1 lg:flex lg:w-auto lg:space-x-2 lg:pb-0 xl:space-x-8"
    >
      {
        main.map((menu) => (
          <>
            {menu.hasChildren ? (
              <li class="nav-item nav-dropdown group relative">
                <span
                  class={`nav-link inline-flex items-center ${
                    menu.children?.map(({ url }) => url).includes(pathname) ||
                    menu.children
                      ?.map(({ url }) => `${url}/`)
                      .includes(pathname)
                      ? "active"
                      : ""
                  }`}
                >
                  {menu.name}
                  <svg class="h-4 w-4 fill-current" viewBox="0 0 20 20">
                    <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z" />
                  </svg>
                </span>
                <ul class="nav-dropdown-list hidden group-hover:block lg:invisible lg:absolute lg:block lg:opacity-0 lg:group-hover:visible lg:group-hover:opacity-100">
                  {menu.children?.map((child) => (
                    <li class="nav-dropdown-item">
                      <a
                        href={child.url}
                        aria-label={child.name}
                        class={`nav-dropdown-link block ${
                          (pathname === `${child.url}/` ||
                            pathname === child.url) &&
                          "active"
                        }`}
                        data-nav-link
                      >
                        {child.name}
                      </a>
                    </li>
                  ))}
                </ul>
              </li>
            ) : (
              <li class="nav-item">
                <a
                  href={menu.url}
                  class={`nav-link block ${
                    (pathname === `${menu.url}/` || pathname === menu.url) &&
                    "active"
                  }`}
                  data-nav-link
                >
                  {menu.name}
                </a>
              </li>
            )}
          </>
        ))
      }
      {
        navigation_button.enable && (
          <li class="mt-4 inline-block lg:hidden">
            <a
              class="btn btn-outline-primary btn-sm"
              href={navigation_button.link}
              data-nav-link
            >
              {navigation_button.label}
            </a>
          </li>
        )
      }
    </ul>
    <div class="order-1 ml-auto flex items-center md:order-2 lg:ml-0">
      {
        settings.search && (
          <button
            class="border-border text-text-dark hover:text-primary dark:border-darkmode-border mr-5 inline-block border-r pr-5 text-xl dark:text-white dark:hover:text-darkmode-primary"
            aria-label="search"
            data-search-trigger
          >
            <IoSearch />
          </button>
        )
      }
      <ThemeSwitcher className="mr-5" />
      {
        navigation_button.enable && (
          <a
            class="btn btn-outline-primary btn-sm hidden lg:inline-block"
            href={navigation_button.link}
            data-nav-link
          >
            {navigation_button.label}
          </a>
        )
      }
    </div>
  </nav>
</header>

<script>
  // Custom client-side router
  class Router {
    private links: NodeListOf<HTMLAnchorElement>;
    private mainContent: HTMLElement | null;

    constructor() {
      this.links = document.querySelectorAll<HTMLAnchorElement>('[data-nav-link]');
      this.mainContent = document.getElementById('main-content');
      this.setupEventListeners();
    }

    setupEventListeners(): void {
      this.links.forEach(link => {
        link.addEventListener('click', (e: Event) => {
          e.preventDefault();
          const href = link.getAttribute('href');
          if (href) {
            this.navigate(href);
          }
        });
      });

      // Handle browser back/forward buttons
      window.addEventListener('popstate', () => {
        this.handleRouteChange(window.location.pathname);
      });
    }

    async navigate(url: string): Promise<void> {
      try {
        if (!this.mainContent) return;
        
        // Show loading state
        this.mainContent.style.opacity = '0.5';
        
        // Fetch the new page content
        const response = await fetch(url);
        const html = await response.text();
        
        // Create a temporary element to parse the HTML
        const parser = new DOMParser();
        const doc = parser.parseFromString(html, 'text/html');
        
        // Get the new content
        const newContent = doc.getElementById('main-content');
        
        if (newContent) {
          // Update the URL without reload
          window.history.pushState({}, '', url);
          
          // Update the content with a fade effect
          this.mainContent.style.transition = 'opacity 0.3s ease-in-out';
          this.mainContent.innerHTML = newContent.innerHTML;
          this.mainContent.style.opacity = '1';
          
          // Update active states
          this.updateActiveStates(url);
        }
      } catch (error) {
        console.error('Navigation failed:', error);
        // Fallback to regular navigation if something goes wrong
        window.location.href = url;
      }
    }

    handleRouteChange(path: string): void {
      this.updateActiveStates(path);
    }

    updateActiveStates(currentPath: string): void {
      this.links.forEach(link => {
        const href = link.getAttribute('href');
        if (href === currentPath || href === currentPath + '/') {
          link.classList.add('active');
        } else {
          link.classList.remove('active');
        }
      });
    }
  }

  // Initialize router when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new Router();
  });
</script>

<style>
  /* Add transition styles */
  #main-content {
    transition: opacity 0.3s ease-in-out;
  }

  .nav-link {
    transition: color 0.3s ease-in-out;
  }

  .nav-link.active {
    color: var(--primary-color);
  }
</style>
